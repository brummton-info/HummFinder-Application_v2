Index: app/src/main/res/layout/activity_unassigned.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".unassigned.UnassignedActivity\">\r\n\r\n\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_unassigned.xml b/app/src/main/res/layout/activity_unassigned.xml
--- a/app/src/main/res/layout/activity_unassigned.xml	(revision ce624f96a70ef7f14c961f9e359533ab408a5343)
+++ b/app/src/main/res/layout/activity_unassigned.xml	(date 1676741736044)
@@ -7,6 +7,28 @@
     tools:context=".unassigned.UnassignedActivity">
 
 
+    <TextView
+        android:id="@+id/tv_test"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Custom View Test"
+        android:textColor="@color/black"
+        android:textSize="20sp"
+        app:layout_constraintBottom_toTopOf="@+id/iv_test"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintHorizontal_bias="0.5"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
 
+    <hummfinderapp.alpha.unassigned.DialView
+        android:id="@+id/iv_test"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintHorizontal_bias="0.5"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/tv_test"
+        app:srcCompat="@drawable/cardimage_placeholder_one" />
 </androidx.constraintlayout.widget.ConstraintLayout>
 
Index: app/src/main/java/hummfinderapp/alpha/matching/MatchingActivityViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package hummfinderapp.alpha.matching\r\n\r\n\r\nimport android.app.Application\r\nimport android.util.Log\r\nimport androidx.lifecycle.*\r\nimport hummfinderapp.alpha.repository.DataStoreRepository\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.cancel\r\nimport kotlinx.coroutines.launch\r\n\r\nclass MatchingActivityViewModel (application: Application): AndroidViewModel(application) {\r\n\r\n        //PREFERENCE DATASTORE\r\n        private val repository = DataStoreRepository(application)\r\n        val readFromDataStoreFrequency = repository.readFromDataStoreFrequency.asLiveData()\r\n        val readFromDataStoreLevel = repository.readFromDataStoreLevel.asLiveData()\r\n\r\n        fun saveToDataStore(frequency: String, level:String) = viewModelScope.launch(Dispatchers.IO) {\r\n                repository.saveToDataStore(frequency,level)\r\n        }\r\n\r\n        private val TONEGENERATOR = ToneGenerator()\r\n        private val TAG = \"Matching ViewModel\"\r\n\r\n        //MUTABLE LIVE DATA FREQUENCY\r\n        private var _frequency = MutableLiveData<Int>()\r\n        fun frequency(): LiveData<Int>{\r\n                return _frequency\r\n        }\r\n\r\n        // TONE GENERATOR FREQUENCY VARIABLE INITIALIZATION\r\n        var TGFrequency: Double = 150.0\r\n                set(frequency){\r\n                        field = frequency\r\n                        TONEGENERATOR.frequency = frequency\r\n                        _frequency.value = frequency.toInt()\r\n                }\r\n\r\n        var TGLevel: Double = 0.3\r\n                set(level) {\r\n                        field = level\r\n                        TONEGENERATOR.level = level\r\n                }\r\n\r\n        fun startToneGenerator(){\r\n                TONEGENERATOR.start()\r\n        }\r\n\r\n        fun stopToneGenerator(){\r\n                TONEGENERATOR.stop()\r\n                Log.d(TAG, \"Tone Generator Stopped > btn\")\r\n        }\r\n\r\n        fun increaseFrequencyByOne(){\r\n                TGFrequency = TGFrequency + 1\r\n        }\r\n\r\n        fun decreaseFrequencyByOne(){\r\n                TGFrequency = TGFrequency - 1\r\n        }\r\n\r\n        fun onSeekBarProgressChanged(progress:Int){\r\n                TGFrequency = progress.toDouble()\r\n        }\r\n\r\n        override fun onCleared() {\r\n                super.onCleared()\r\n                TONEGENERATOR.stop()\r\n                Log.d(TAG,\"Tone Generator stopped > onBackPressed\")\r\n        }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/hummfinderapp/alpha/matching/MatchingActivityViewModel.kt b/app/src/main/java/hummfinderapp/alpha/matching/MatchingActivityViewModel.kt
--- a/app/src/main/java/hummfinderapp/alpha/matching/MatchingActivityViewModel.kt	(revision ce624f96a70ef7f14c961f9e359533ab408a5343)
+++ b/app/src/main/java/hummfinderapp/alpha/matching/MatchingActivityViewModel.kt	(date 1668792494846)
@@ -60,7 +60,7 @@
                 TGFrequency = TGFrequency - 1
         }
 
-        fun onSeekBarProgressChanged(progress:Int){
+        fun onSeekBarProgressChanged(progress:Float){
                 TGFrequency = progress.toDouble()
         }
 
Index: app/src/main/res/layout/activity_matching.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".matching.MatchingActivity\">\r\n\r\n    <TextView\r\n        android:id=\"@+id/matchingActivityTitle\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"@string/tinnitus_matching\"\r\n        android:textAllCaps=\"true\"\r\n        android:textColor=\"@color/black\"\r\n        android:textSize=\"@dimen/titleTextSize\"\r\n        app:layout_constraintBottom_toTopOf=\"@+id/textView2\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/guideline2\"\r\n        app:layout_constraintStart_toStartOf=\"@+id/guideline1\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/textView2\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"@string/sometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometext\"\r\n        android:textAllCaps=\"false\"\r\n        android:textColor=\"@color/gray\"\r\n        android:textSize=\"15sp\"\r\n        app:layout_constraintBottom_toTopOf=\"@+id/startTone\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/guideline2\"\r\n        app:layout_constraintStart_toStartOf=\"@+id/guideline1\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/matchingActivityTitle\" />\r\n\r\n    <androidx.constraintlayout.widget.ConstraintLayout\r\n        android:id=\"@+id/constraintLayout\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        app:layout_constraintBottom_toTopOf=\"@+id/matchingSeekBar\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/guideline2\"\r\n        app:layout_constraintStart_toStartOf=\"@+id/guideline1\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/startTone\">\r\n\r\n        <TextView\r\n            android:id=\"@+id/TextMatching\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:background=\"@android:color/holo_orange_light\"\r\n            android:paddingHorizontal=\"10dp\"\r\n            android:paddingVertical=\"10dp\"\r\n            android:textAlignment=\"center\"\r\n            android:textColor=\"@color/black\"\r\n            android:textSize=\"30sp\"\r\n            app:layout_constraintBottom_toBottomOf=\"parent\"\r\n            app:layout_constraintEnd_toStartOf=\"@+id/textView5\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toTopOf=\"parent\"\r\n            android:text=\"150\"/>\r\n\r\n        <TextView\r\n            android:id=\"@+id/textView5\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:background=\"@android:color/holo_orange_light\"\r\n            android:paddingVertical=\"10dp\"\r\n            android:paddingRight=\"10dp\"\r\n            android:text=\"@string/hz\"\r\n            android:textAlignment=\"center\"\r\n            android:textAllCaps=\"true\"\r\n            android:textColor=\"@color/black\"\r\n            android:textSize=\"30sp\"\r\n            app:layout_constraintBottom_toBottomOf=\"parent\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toEndOf=\"@+id/TextMatching\"\r\n            app:layout_constraintTop_toTopOf=\"parent\" />\r\n    </androidx.constraintlayout.widget.ConstraintLayout>\r\n\r\n    <SeekBar\r\n        android:id=\"@+id/matchingSeekBar\"\r\n        android:layout_width=\"233dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:progressTint=\"@color/black\"\r\n        android:thumbTint=\"@color/black\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/increaseFrequency\"\r\n        app:layout_constraintHorizontal_bias=\"0.5\"\r\n        app:layout_constraintStart_toEndOf=\"@+id/decreaseFrequency\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/constraintLayout\" />\r\n\r\n    <androidx.constraintlayout.widget.Guideline\r\n        android:id=\"@+id/guideline1\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"vertical\"\r\n        app:layout_constraintGuide_percent=\"0.10\" />\r\n\r\n    <androidx.constraintlayout.widget.Guideline\r\n        android:id=\"@+id/guideline2\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"vertical\"\r\n        app:layout_constraintGuide_percent=\"0.90\" />\r\n\r\n    <ImageButton\r\n        android:id=\"@+id/decreaseFrequency\"\r\n        android:layout_width=\"@dimen/matButtonDimensions\"\r\n        android:layout_height=\"@dimen/matButtonDimensions\"\r\n        android:backgroundTint=\"@android:color/holo_orange_light\"\r\n        android:contentDescription=\"@string/matminus\"\r\n        android:elevation=\"4dp\"\r\n        app:layout_constraintBottom_toBottomOf=\"@+id/matchingSeekBar\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/matchingSeekBar\"\r\n        app:layout_constraintHorizontal_bias=\"0.5\"\r\n        app:layout_constraintStart_toStartOf=\"@+id/guideline1\"\r\n        app:layout_constraintTop_toTopOf=\"@+id/matchingSeekBar\"\r\n        app:srcCompat=\"@drawable/ic_baseline_exposure_neg_1_24\" />\r\n\r\n    <ImageButton\r\n        android:id=\"@+id/increaseFrequency\"\r\n        android:layout_width=\"@dimen/matButtonDimensions\"\r\n        android:layout_height=\"@dimen/matButtonDimensions\"\r\n        android:backgroundTint=\"@android:color/holo_orange_light\"\r\n        android:contentDescription=\"@string/matplus\"\r\n        android:elevation=\"4dp\"\r\n        app:layout_constraintBottom_toBottomOf=\"@+id/matchingSeekBar\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/guideline2\"\r\n        app:layout_constraintHorizontal_bias=\"0.5\"\r\n        app:layout_constraintStart_toEndOf=\"@+id/matchingSeekBar\"\r\n        app:layout_constraintTop_toTopOf=\"@+id/matchingSeekBar\"\r\n        app:srcCompat=\"@drawable/ic_baseline_exposure_plus_1_24\" />\r\n\r\n\r\n    <ImageButton\r\n        android:id=\"@+id/startTone\"\r\n        android:layout_width=\"@dimen/matButtonDimensions\"\r\n        android:layout_height=\"@dimen/matButtonDimensions\"\r\n        android:backgroundTint=\"@android:color/holo_orange_light\"\r\n        android:elevation=\"4dp\"\r\n        app:layout_constraintBottom_toTopOf=\"@+id/constraintLayout\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/guideline2\"\r\n        app:layout_constraintStart_toStartOf=\"@+id/guideline1\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/textView2\"\r\n        tools:ignore=\"SpeakableTextPresentCheck\"\r\n        android:src=\"@drawable/ic_baseline_play_arrow_24\"/>\r\n\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_matching.xml b/app/src/main/res/layout/activity_matching.xml
--- a/app/src/main/res/layout/activity_matching.xml	(revision ce624f96a70ef7f14c961f9e359533ab408a5343)
+++ b/app/src/main/res/layout/activity_matching.xml	(date 1668793719646)
@@ -75,12 +75,15 @@
             app:layout_constraintTop_toTopOf="parent" />
     </androidx.constraintlayout.widget.ConstraintLayout>
 
-    <SeekBar
+    <com.google.android.material.slider.Slider
         android:id="@+id/matchingSeekBar"
         android:layout_width="233dp"
         android:layout_height="wrap_content"
-        android:progressTint="@color/black"
-        android:thumbTint="@color/black"
+        app:thumbColor="@color/black"
+        app:thumbRadius="7dp"
+        app:trackColorActive="@color/black"
+        app:trackColorInactive="@color/sliderTrackColor"
+        app:haloColor="@color/lightGray"
         app:layout_constraintBottom_toBottomOf="parent"
         app:layout_constraintEnd_toStartOf="@+id/increaseFrequency"
         app:layout_constraintHorizontal_bias="0.5"
Index: app/src/main/res/values/colors.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<resources>\r\n    <color name=\"purple_200\">#FFBB86FC</color>\r\n    <color name=\"purple_500\">#FF6200EE</color>\r\n    <color name=\"purple_700\">#FF3700B3</color>\r\n    <color name=\"teal_200\">#FF03DAC5</color>\r\n    <color name=\"teal_700\">#FF018786</color>\r\n    <color name=\"black\">#FF000000</color>\r\n    <color name=\"gray\">#757575</color>\r\n    <color name=\"white\">#FFFFFFFF</color>\r\n    <color name=\"lightGray\">#F5F5F5</color>\r\n    <color name=\"Hummfindercolor\">#FFCC00</color>\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/colors.xml b/app/src/main/res/values/colors.xml
--- a/app/src/main/res/values/colors.xml	(revision ce624f96a70ef7f14c961f9e359533ab408a5343)
+++ b/app/src/main/res/values/colors.xml	(date 1668795552879)
@@ -10,4 +10,8 @@
     <color name="white">#FFFFFFFF</color>
     <color name="lightGray">#F5F5F5</color>
     <color name="Hummfindercolor">#FFCC00</color>
+    <color name="seekBarProgress">#FF7F7F</color>
+    <color name="seekBarThumb">#8bc34a</color>
+    <color name="sliderThumbHalo">#dcedc9</color>
+    <color name="sliderTrackColor">#D3D3D3</color>
 </resources>
\ No newline at end of file
Index: app/src/main/res/layout/activity_calibration.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".calibration.CalibrationActivity\">\r\n\r\n\r\n    <TextView\r\n        android:id=\"@+id/calibrationTitle\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"@string/calibration\"\r\n        android:textAllCaps=\"true\"\r\n        android:textColor=\"@color/black\"\r\n        android:textSize=\"20sp\"\r\n        app:layout_constraintBottom_toTopOf=\"@+id/calibrationspektrum\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/guide2\"\r\n        app:layout_constraintStart_toStartOf=\"@+id/guide1\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <hummfinderapp.alpha.calibration.Spectrum\r\n        android:id=\"@+id/spektrum\"\r\n        android:layout_width=\"304dp\"\r\n        android:layout_height=\"205dp\"\r\n        app:layout_constraintEnd_toEndOf=\"@+id/calibrationspektrum\"\r\n        app:layout_constraintStart_toStartOf=\"@+id/calibrationspektrum\"\r\n        app:layout_constraintTop_toTopOf=\"@+id/calibrationspektrum\" />\r\n\r\n    <ImageView\r\n        android:id=\"@+id/calibrationspektrum\"\r\n        android:layout_width=\"300dp\"\r\n        android:layout_height=\"@dimen/calMockViewHeight\"\r\n        android:background=\"@color/lightGray\"\r\n        android:contentDescription=\"@string/todo\"\r\n        android:scaleType=\"fitXY\"\r\n        app:layout_constraintBottom_toTopOf=\"@+id/calSeekBar\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/guide2\"\r\n        app:layout_constraintStart_toStartOf=\"@+id/guide1\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/calibrationTitle\" />\r\n\r\n    <ImageButton\r\n        android:id=\"@+id/calPlusButton\"\r\n        android:layout_width=\"@dimen/calButtonDimensions\"\r\n        android:layout_height=\"@dimen/calButtonDimensions\"\r\n        android:backgroundTint=\"@android:color/holo_orange_light\"\r\n        android:contentDescription=\"@string/plusbutton\"\r\n        android:elevation=\"4dp\"\r\n        android:src=\"@drawable/ic_baseline_exposure_plus_1_24\"\r\n        app:layout_constraintBottom_toBottomOf=\"@+id/calSeekBar\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/guide2\"\r\n        app:layout_constraintHorizontal_bias=\"0.5\"\r\n        app:layout_constraintStart_toEndOf=\"@+id/calSeekBar\"\r\n        app:layout_constraintTop_toTopOf=\"@+id/calSeekBar\"\r\n        tools:ignore=\"SpeakableTextPresentCheck,ImageContrastCheck,ImageContrastCheck\" />\r\n\r\n    <SeekBar\r\n        android:id=\"@+id/calSeekBar\"\r\n        android:layout_width=\"233dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:progressTint=\"@color/black\"\r\n        android:thumbTint=\"@color/black\"\r\n        app:layout_constraintBottom_toTopOf=\"@+id/btnCalPlay\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/calPlusButton\"\r\n        app:layout_constraintHorizontal_bias=\"0.5\"\r\n        app:layout_constraintStart_toEndOf=\"@+id/calMinusButton\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/calibrationspektrum\" />\r\n\r\n    <ImageButton\r\n        android:id=\"@+id/calMinusButton\"\r\n        android:layout_width=\"@dimen/calButtonDimensions\"\r\n        android:layout_height=\"@dimen/calButtonDimensions\"\r\n        android:backgroundTint=\"@android:color/holo_orange_light\"\r\n        android:contentDescription=\"@string/minusbutton\"\r\n        android:elevation=\"4dp\"\r\n        android:src=\"@drawable/ic_baseline_exposure_neg_1_24\"\r\n        app:layout_constraintBottom_toBottomOf=\"@+id/calSeekBar\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/calSeekBar\"\r\n        app:layout_constraintHorizontal_bias=\"0.5\"\r\n        app:layout_constraintStart_toStartOf=\"@+id/guide1\"\r\n        app:layout_constraintTop_toTopOf=\"@+id/calSeekBar\"\r\n        tools:ignore=\"SpeakableTextPresentCheck,ImageContrastCheck\" />\r\n\r\n    <ImageButton\r\n        android:id=\"@+id/btnCalPlay\"\r\n        android:layout_width=\"@dimen/calButtonDimensions\"\r\n        android:layout_height=\"@dimen/calButtonDimensions\"\r\n        android:background=\"@android:color/holo_orange_light\"\r\n        android:contentDescription=\"@string/mutebutton\"\r\n        android:elevation=\"4dp\"\r\n        android:src=\"@drawable/ic_baseline_play_arrow_24\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/guide2\"\r\n        app:layout_constraintStart_toStartOf=\"@+id/guide1\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/calSeekBar\"\r\n        tools:ignore=\"SpeakableTextPresentCheck\" />\r\n\r\n    <androidx.constraintlayout.widget.Guideline\r\n        android:id=\"@+id/guide1\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"vertical\"\r\n        app:layout_constraintGuide_percent=\"0.10\" />\r\n\r\n    <androidx.constraintlayout.widget.Guideline\r\n        android:id=\"@+id/guide2\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"vertical\"\r\n        app:layout_constraintGuide_percent=\"0.90\" />\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_calibration.xml b/app/src/main/res/layout/activity_calibration.xml
--- a/app/src/main/res/layout/activity_calibration.xml	(revision ce624f96a70ef7f14c961f9e359533ab408a5343)
+++ b/app/src/main/res/layout/activity_calibration.xml	(date 1681945237778)
@@ -6,7 +6,6 @@
     android:layout_height="match_parent"
     tools:context=".calibration.CalibrationActivity">
 
-
     <TextView
         android:id="@+id/calibrationTitle"
         android:layout_width="wrap_content"
@@ -15,26 +14,22 @@
         android:textAllCaps="true"
         android:textColor="@color/black"
         android:textSize="20sp"
-        app:layout_constraintBottom_toTopOf="@+id/calibrationspektrum"
+        app:layout_constraintBottom_toTopOf="@+id/lcv_lineView"
         app:layout_constraintEnd_toStartOf="@+id/guide2"
         app:layout_constraintStart_toStartOf="@+id/guide1"
         app:layout_constraintTop_toTopOf="parent" />
 
-    <hummfinderapp.alpha.calibration.Spectrum
+    <!--<hummfinderapp.alpha.calibration.Spectrum
         android:id="@+id/spektrum"
         android:layout_width="304dp"
         android:layout_height="205dp"
-        app:layout_constraintEnd_toEndOf="@+id/calibrationspektrum"
-        app:layout_constraintStart_toStartOf="@+id/calibrationspektrum"
-        app:layout_constraintTop_toTopOf="@+id/calibrationspektrum" />
+        tools:layout_editor_absoluteX="66dp"
+        tools:layout_editor_absoluteY="199dp" />-->
 
-    <ImageView
-        android:id="@+id/calibrationspektrum"
+    <hummfinderapp.alpha.lineChart.LineChartView
+        android:id="@+id/lcv_lineView"
         android:layout_width="300dp"
-        android:layout_height="@dimen/calMockViewHeight"
-        android:background="@color/lightGray"
-        android:contentDescription="@string/todo"
-        android:scaleType="fitXY"
+        android:layout_height="200dp"
         app:layout_constraintBottom_toTopOf="@+id/calSeekBar"
         app:layout_constraintEnd_toStartOf="@+id/guide2"
         app:layout_constraintStart_toStartOf="@+id/guide1"
@@ -53,19 +48,30 @@
         app:layout_constraintHorizontal_bias="0.5"
         app:layout_constraintStart_toEndOf="@+id/calSeekBar"
         app:layout_constraintTop_toTopOf="@+id/calSeekBar"
+        app:layout_constraintVertical_bias="1.0"
         tools:ignore="SpeakableTextPresentCheck,ImageContrastCheck,ImageContrastCheck" />
 
-    <SeekBar
+    <com.google.android.material.slider.Slider
         android:id="@+id/calSeekBar"
         android:layout_width="233dp"
         android:layout_height="wrap_content"
-        android:progressTint="@color/black"
-        android:thumbTint="@color/black"
+        android:stepSize="5"
+        android:valueFrom="0"
+        android:valueTo="100"
+        app:haloColor="@color/sliderThumbHalo"
         app:layout_constraintBottom_toTopOf="@+id/btnCalPlay"
         app:layout_constraintEnd_toStartOf="@+id/calPlusButton"
         app:layout_constraintHorizontal_bias="0.5"
         app:layout_constraintStart_toEndOf="@+id/calMinusButton"
-        app:layout_constraintTop_toBottomOf="@+id/calibrationspektrum" />
+        app:layout_constraintTop_toBottomOf="@+id/lcv_lineView"
+        app:thumbColor="@color/seekBarThumb"
+        app:thumbRadius="7dp"
+        app:thumbStrokeColor="@color/black"
+        app:thumbStrokeWidth="2dp"
+        app:tickColor="@color/black"
+        app:trackColorActive="@color/seekBarProgress"
+        app:trackColorInactive="@color/seekBarProgress"
+        tools:ignore="SpeakableTextPresentCheck" />
 
     <ImageButton
         android:id="@+id/calMinusButton"
@@ -80,6 +86,7 @@
         app:layout_constraintHorizontal_bias="0.5"
         app:layout_constraintStart_toStartOf="@+id/guide1"
         app:layout_constraintTop_toTopOf="@+id/calSeekBar"
+        app:layout_constraintVertical_bias="0.0"
         tools:ignore="SpeakableTextPresentCheck,ImageContrastCheck" />
 
     <ImageButton
@@ -92,6 +99,7 @@
         android:src="@drawable/ic_baseline_play_arrow_24"
         app:layout_constraintBottom_toBottomOf="parent"
         app:layout_constraintEnd_toStartOf="@+id/guide2"
+        app:layout_constraintHorizontal_bias="0.5"
         app:layout_constraintStart_toStartOf="@+id/guide1"
         app:layout_constraintTop_toBottomOf="@+id/calSeekBar"
         tools:ignore="SpeakableTextPresentCheck" />
Index: app/src/main/java/hummfinderapp/alpha/unassigned/DialView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/hummfinderapp/alpha/unassigned/DialView.kt b/app/src/main/java/hummfinderapp/alpha/unassigned/DialView.kt
new file mode 100644
--- /dev/null	(date 1676754698886)
+++ b/app/src/main/java/hummfinderapp/alpha/unassigned/DialView.kt	(date 1676754698886)
@@ -0,0 +1,43 @@
+package hummfinderapp.alpha.unassigned
+
+import android.content.Context
+import android.graphics.*
+import android.util.AttributeSet
+import android.view.View
+import hummfinderapp.alpha.R
+import kotlin.math.cos
+import kotlin.math.min
+import kotlin.math.sin
+
+
+class DialView @JvmOverloads constructor(
+    context: Context,
+    attrs: AttributeSet? = null,
+    defStyleAttr: Int = 0
+) : View(context, attrs, defStyleAttr) {
+
+    private val pointPosition: PointF = PointF(0.0f, 0.0f)
+
+    private val paint = Paint(Paint.ANTI_ALIAS_FLAG).apply {
+        style = Paint.Style.FILL
+        textAlign = Paint.Align.CENTER
+        textSize = 55.0f
+        typeface = Typeface.create( "", Typeface.BOLD)
+    }
+
+
+
+    override fun onSizeChanged(w: Int, h: Int, oldw: Int, oldh: Int) {
+    //change of tic distance or axis lines based on screen distance
+    }
+
+    override fun onDraw(canvas: Canvas?) {
+        super.onDraw(canvas)
+
+    }
+
+    private fun PointF.computeXYForSpeed() {
+
+    }
+
+}
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"DesignSurface\">\r\n    <option name=\"filePathToZoomLevelMap\">\r\n      <map>\r\n        <entry key=\"..\\:/Users/arnab/AndroidStudioProjects/HummFinderApp_MDL1/app/src/main/res/layout/activity_calibration.xml\" value=\"0.25416666666666665\" />\r\n        <entry key=\"..\\:/Users/arnab/AndroidStudioProjects/HummFinderApp_MDL1/app/src/main/res/layout/activity_info.xml\" value=\"0.22135416666666666\" />\r\n        <entry key=\"..\\:/Users/arnab/AndroidStudioProjects/HummFinderApp_MDL1/app/src/main/res/layout/activity_matching.xml\" value=\"0.25416666666666665\" />\r\n        <entry key=\"..\\:/Users/arnab/AndroidStudioProjects/HummFinderApp_MDL1/app/src/main/res/menu/homemenu.xml\" value=\"0.25416666666666665\" />\r\n        <entry key=\"..\\:/Users/arnab/AndroidStudioProjects/HummFinderApp_MDL1/app/src/main/res/menu/menuwithsave.xml\" value=\"0.25416666666666665\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"Android Studio default JDK\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision ce624f96a70ef7f14c961f9e359533ab408a5343)
+++ b/.idea/misc.xml	(date 1682526448001)
@@ -3,9 +3,12 @@
   <component name="DesignSurface">
     <option name="filePathToZoomLevelMap">
       <map>
-        <entry key="..\:/Users/arnab/AndroidStudioProjects/HummFinderApp_MDL1/app/src/main/res/layout/activity_calibration.xml" value="0.25416666666666665" />
+        <entry key="..\:/Users/arnab/AndroidStudioProjects/HummFinderApp_MDL1/app/src/main/res/drawable/bg_custom_seekbar.xml" value="0.209" />
+        <entry key="..\:/Users/arnab/AndroidStudioProjects/HummFinderApp_MDL1/app/src/main/res/drawable/bg_progress.xml" value="0.209" />
+        <entry key="..\:/Users/arnab/AndroidStudioProjects/HummFinderApp_MDL1/app/src/main/res/layout/activity_calibration.xml" value="0.536" />
         <entry key="..\:/Users/arnab/AndroidStudioProjects/HummFinderApp_MDL1/app/src/main/res/layout/activity_info.xml" value="0.22135416666666666" />
         <entry key="..\:/Users/arnab/AndroidStudioProjects/HummFinderApp_MDL1/app/src/main/res/layout/activity_matching.xml" value="0.25416666666666665" />
+        <entry key="..\:/Users/arnab/AndroidStudioProjects/HummFinderApp_MDL1/app/src/main/res/layout/activity_unassigned.xml" value="0.25" />
         <entry key="..\:/Users/arnab/AndroidStudioProjects/HummFinderApp_MDL1/app/src/main/res/menu/homemenu.xml" value="0.25416666666666665" />
         <entry key="..\:/Users/arnab/AndroidStudioProjects/HummFinderApp_MDL1/app/src/main/res/menu/menuwithsave.xml" value="0.25416666666666665" />
       </map>
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\r\n    <string name=\"app_name\">HummFinder App</string>\r\n    <string name=\"area_title\">area_title</string>\r\n    <string name=\"image1\">image1</string>\r\n    <string name=\"area_1\">area_1</string>\r\n    <string name=\"helloworldhelloworldhelloworldhelloworldhelloworldhelloworld\">helloworldhelloworldhelloworldhelloworldhelloworldhelloworld</string>\r\n    <string name=\"image2\">image2</string>\r\n    <string name=\"area_2\">area_2</string>\r\n    <string name=\"image3\">image3</string>\r\n    <string name=\"area_3\">area_3</string>\r\n    <string name=\"image4\">image4</string>\r\n    <string name=\"area_4\">area_4</string>\r\n    <string name=\"info\">info</string>\r\n    <string name=\"sometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometext\">SomeTextSomeTextSomeTextSomeTextSomeTextSomeTextSomeTextSomeText</string>\r\n    <string name=\"links\">links</string>\r\n    <string name=\"tinnitus_matching\">Tinnitus Matching</string>\r\n    <string name=\"sometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometext\">sometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometextsometext</string>\r\n    <string name=\"calibration\">Calibration</string>\r\n    <string name=\"plusbutton\">plusbutton</string>\r\n    <string name=\"mutebutton\">mutebutton</string>\r\n    <string name=\"minusbutton\">minusbutton</string>\r\n    <string name=\"matminus\">matMinus</string>\r\n    <string name=\"matplus\">matPlus</string>\r\n    <string name=\"hz\">Hz</string>\r\n    <string name=\"todo\">TODO</string>\r\n    <string name=\"_200_hz\">200 Hz</string>\r\n    <string name=\"_0_hz\">0 Hz</string>\r\n    <string name=\"_100_hz\">100 Hz</string>\r\n    <!-- TODO: Remove or change this placeholder text -->\r\n    <string name=\"hello_blank_fragment\">Hello blank fragment</string>\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
--- a/app/src/main/res/values/strings.xml	(revision ce624f96a70ef7f14c961f9e359533ab408a5343)
+++ b/app/src/main/res/values/strings.xml	(date 1676711605653)
@@ -28,4 +28,8 @@
     <string name="_100_hz">100 Hz</string>
     <!-- TODO: Remove or change this placeholder text -->
     <string name="hello_blank_fragment">Hello blank fragment</string>
+    <string name="fan_off">off</string>
+    <string name="fan_low">1</string>
+    <string name="fan_medium">2</string>
+    <string name="fan_high">3</string>
 </resources>
\ No newline at end of file
Index: app/src/main/java/hummfinderapp/alpha/calibration/calibrationViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package hummfinderapp.alpha.calibration\r\n\r\nimport android.app.Application\r\nimport android.graphics.Bitmap\r\nimport android.media.AudioRecord\r\nimport android.util.Log\r\nimport android.widget.Toast\r\nimport androidx.lifecycle.*\r\nimport hummfinderapp.alpha.matching.ToneGenerator\r\nimport hummfinderapp.alpha.repository.DataStoreRepository\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.cancel\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.withContext\r\nimport org.jtransforms.fft.FloatFFT_1D\r\nimport kotlin.math.abs\r\n\r\nclass calibrationViewModel(application: Application): AndroidViewModel(application) {\r\n\r\n    val CHUNK_SIZE = 8192\r\n    val WINDOW_SIZE = 65536\r\n    val FREQUENCY_CUTOFF_UPPER = 300\r\n    val WIDTH = FREQUENCY_CUTOFF_UPPER\r\n    val HEIGHT = 200\r\n    val BIN_SIZE = ((WINDOW_SIZE / 2) + 1) / WIDTH\r\n\r\n    private var isCalibrating = false\r\n\r\n    //DATA FROM DATASTORE\r\n    private val repository = DataStoreRepository(application)\r\n    val readFromDataStoreFrequency = repository.readFromDataStoreFrequency.asLiveData()\r\n    val readFromDataStoreLevel = repository.readFromDataStoreLevel.asLiveData()\r\n\r\n    fun saveToDataStore(frequency: String, level:String) = viewModelScope.launch(Dispatchers.IO) {\r\n        repository.saveToDataStore(frequency,level)\r\n    }\r\n\r\n    //TONE GENERATOR\r\n    private val TONEGENERATOR = ToneGenerator()\r\n    private val TAG = \"CALIBRATION VIEWMODEL\"\r\n\r\n    //MUTABLE LIVE DATA LEVEL\r\n    private var _level = MutableLiveData<Int>()\r\n    fun level(): LiveData<Int>{\r\n        return _level\r\n    }\r\n\r\n    //MUTABLE LIVE DATA SPECTROGRAM\r\n    private val spectrogramColorArray = MutableLiveData<IntArray>(IntArray(WIDTH * HEIGHT))\r\n    val generatedBitmap: LiveData<Bitmap> = Transformations.map(spectrogramColorArray) {\r\n        bitmapFromData(it)\r\n    }\r\n\r\n    //MUTABLE LIVE DATA DECIBEL VALUES\r\n    private var _decibelValuesToSpectrum = MutableLiveData<FloatArray>(FloatArray(WIDTH))\r\n    fun decibelValuesToSpectrum(): LiveData<FloatArray>{\r\n        return _decibelValuesToSpectrum\r\n    }\r\n\r\n    var TGFrequency: Double = 150.0\r\n        set(frequency){\r\n            field = frequency\r\n            TONEGENERATOR.frequency = frequency\r\n        }\r\n\r\n    var TGLevel: Double = 0.3\r\n        set(level) {\r\n            field = level\r\n            TONEGENERATOR.level = level\r\n            _level.value = level.toInt()\r\n        }\r\n\r\n    //START TONE GENERATOR\r\n    fun startToneGenerator(){\r\n        TONEGENERATOR.start()\r\n        isCalibrating = true\r\n        Log.d(TAG,\"Tone generator started\")\r\n    }\r\n\r\n    //STOP TONE GENERATOR\r\n    fun stopToneGenerator(){\r\n        TONEGENERATOR.stop()\r\n        Log.d(TAG, \"Tone Generator Stopped > btn\")\r\n    }\r\n\r\n    //INCREASE LEVEL BY ONE\r\n    fun increaseLevelByOne(){\r\n        val base = 10\r\n        val exponent = 0.05\r\n        TGLevel += Math.pow(base.toDouble(),exponent)\r\n    }\r\n\r\n    //DECREASE LEVEL BY ONE\r\n    fun decreaseLevelByOne(){\r\n        val base = 10\r\n        val exponent = 0.05\r\n        TGLevel -= Math.pow(base.toDouble(),exponent)\r\n    }\r\n\r\n    //SEEKBAR\r\n    fun onSeekBarProgressChanged(progress:Int){\r\n        TGLevel = progress.toDouble()\r\n    }\r\n\r\n    //AUDIO AND SPECTRUM\r\n    fun audioToSpectrum(audioRecord: AudioRecord){\r\n        Log.d(TAG,\"AUDIORECORD TRANSFERED to VIEWMODEL with recording state: ${audioRecord.state} AND ${audioRecord.recordingState} \")\r\n        val recordedSamples = ShortArray(WINDOW_SIZE)\r\n        viewModelScope.launch {\r\n            val fft = FloatFFT_1D(recordedSamples.size.toLong())\r\n\r\n            while (true) {\r\n                addHistogramRow(withContext(Dispatchers.Default) {\r\n\r\n                    // Shift recordedSamples by one chunk\r\n                    System.arraycopy(\r\n                        recordedSamples,\r\n                        CHUNK_SIZE,\r\n                        recordedSamples,\r\n                        0,\r\n                        WINDOW_SIZE - CHUNK_SIZE\r\n                    )\r\n\r\n                    // Read one chunk into recordedSamples\r\n                    audioRecord.read(recordedSamples, WINDOW_SIZE - CHUNK_SIZE, CHUNK_SIZE)\r\n                    val floatArray = FloatArray(recordedSamples.size) {\r\n                        recordedSamples[it].toFloat()\r\n                    }\r\n\r\n                    fft.realForward(floatArray)\r\n                    val absolutes = absoluteFromComplex(floatArray)\r\n\r\n                    val histogram = absolutes.copyOf(FREQUENCY_CUTOFF_UPPER)\r\n\r\n                    val histogramInDecibel = decibelFromAbsolute(histogram)\r\n                    val histogramInDecibelReverse = decibelFromAbsoluteReverse(histogram)\r\n                    _decibelValuesToSpectrum.postValue(histogramInDecibelReverse)\r\n\r\n                    println(\"Magnitudes Reverse: ${histogramInDecibelReverse.joinToString(\",\")}\")\r\n\r\n                    val minDecibel = histogramInDecibel.minOrNull()!!\r\n\r\n                    val histogramNormalizedForColormap = IntArray(WIDTH) {\r\n                        ((1f - abs(histogramInDecibel[it] / minDecibel)) * COLORMAP_MAX_INDEX).toInt()\r\n                    }\r\n                    val histogramInColors = IntArray(WIDTH) {\r\n                        PARULA_COLORMAP[histogramNormalizedForColormap[it]]\r\n                    }\r\n                    histogramInColors\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    //VIKTOR > BITMAP FROM DATA\r\n    private fun bitmapFromData(colorArray: IntArray): Bitmap {\r\n        val bitmap = Bitmap.createBitmap(WIDTH, HEIGHT, Bitmap.Config.RGB_565)\r\n\r\n        bitmap.setPixels(colorArray, 0, WIDTH, 0, 0, WIDTH, HEIGHT)\r\n        return bitmap\r\n    }\r\n\r\n    //VIKTOR > ADD HISTOGRAM ROW\r\n    private fun addHistogramRow(newRow: IntArray) {\r\n        if (newRow.size != WIDTH) throw IllegalArgumentException(\r\n            \"The size of the new row must be: $WIDTH, instead it is ${newRow.size}\"\r\n        )\r\n        val spectrogramArray = spectrogramColorArray.value?: return\r\n        // Shift array forward by one Row\r\n        spectrogramArray.copyInto(\r\n            spectrogramArray,\r\n            WIDTH,\r\n            0,\r\n            spectrogramArray.size - WIDTH\r\n        )\r\n        newRow.copyInto(spectrogramArray)\r\n        spectrogramColorArray.value = spectrogramColorArray.value\r\n    }\r\n\r\n    //ON CLEARED\r\n    override fun onCleared() {\r\n        super.onCleared()\r\n\r\n        //STOP TONE GENERATOR\r\n        TONEGENERATOR.stop()\r\n\r\n        //STOP SPECTRUM\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/hummfinderapp/alpha/calibration/calibrationViewModel.kt b/app/src/main/java/hummfinderapp/alpha/calibration/calibrationViewModel.kt
--- a/app/src/main/java/hummfinderapp/alpha/calibration/calibrationViewModel.kt	(revision ce624f96a70ef7f14c961f9e359533ab408a5343)
+++ b/app/src/main/java/hummfinderapp/alpha/calibration/calibrationViewModel.kt	(date 1682090264150)
@@ -98,7 +98,7 @@
     }
 
     //SEEKBAR
-    fun onSeekBarProgressChanged(progress:Int){
+    fun onSeekBarProgressChanged(progress:Float){
         TGLevel = progress.toDouble()
     }
 
@@ -134,8 +134,9 @@
 
                     val histogramInDecibel = decibelFromAbsolute(histogram)
                     val histogramInDecibelReverse = decibelFromAbsoluteReverse(histogram)
-                    _decibelValuesToSpectrum.postValue(histogramInDecibelReverse)
-
+                    //val incomingAudioFloat = DoubletoFloatFun(histogramInDecibelReverse)
+                    _decibelValuesToSpectrum.postValue(histogramInDecibel)
+                    //_decibelValuesToSpectrum.postValue(histogramInDecibel)
                     println("Magnitudes Reverse: ${histogramInDecibelReverse.joinToString(",")}")
 
                     val minDecibel = histogramInDecibel.minOrNull()!!
Index: app/src/main/java/hummfinderapp/alpha/calibration/CalibrationActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package hummfinderapp.alpha.calibration\r\n\r\nimport android.Manifest\r\nimport android.content.pm.PackageManager\r\nimport android.media.AudioFormat\r\nimport android.media.AudioRecord\r\nimport android.media.MediaRecorder\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.MenuItem\r\nimport android.widget.ImageButton\r\nimport android.widget.SeekBar\r\nimport android.widget.Toast\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport hummfinderapp.alpha.R\r\nimport kotlinx.android.synthetic.main.activity_calibration.*\r\n\r\nval REQUEST_CODE = 200\r\nclass CalibrationActivity : AppCompatActivity() {\r\n\r\n    //AUDIO PERMISSION VARIABLES\r\n    private var permissions = arrayOf(Manifest.permission.RECORD_AUDIO)\r\n    private var permissionGranted = false\r\n\r\n    //VIEWMODEL AND ACTIVITY VARIABLES\r\n    val viewModel by lazy { ViewModelProvider(this).get(calibrationViewModel::class.java) }\r\n    private var isRecording:Boolean = false\r\n    private val TAG = \"CALIBRATION ACTIVITY\"\r\n    private val CalPlusButton = findViewById<ImageButton>(R.id.calPlusButton)\r\n    private val CalMinusButton = findViewById<ImageButton>(R.id.calMinusButton)\r\n    private val CalSeekBar = findViewById<SeekBar>(R.id.calSeekBar)\r\n    private val CalPlay = findViewById<ImageButton>(R.id.btnCalPlay)\r\n\r\n    //AUDIO RECORD VARIABLES\r\n    private var RECORDER_SAMPLE_RATE = 44100\r\n    private var DEFAULT_AUDIO_SOURCE = MediaRecorder.AudioSource.DEFAULT\r\n    private var CHANNEL_CONFIG = AudioFormat.CHANNEL_IN_MONO\r\n    private val AUDIO_FORMAT_16 = AudioFormat.ENCODING_PCM_16BIT\r\n\r\n    // AUDIO RECORD AND MIN BUFFER\r\n    private lateinit var audioRecord: AudioRecord\r\n    private val MINIMUM_BUFFER_SIZE = AudioRecord.getMinBufferSize(\r\n        RECORDER_SAMPLE_RATE, CHANNEL_CONFIG, AUDIO_FORMAT_16)\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_calibration)\r\n        supportActionBar?.setDisplayHomeAsUpEnabled(true)\r\n\r\n        //LEVEL OBSERVE\r\n        //viewModel.level().observe(this, {})\r\n\r\n        viewModel.readFromDataStoreFrequency.observe(this, {\r\n                frequency -> viewModel.TGFrequency = frequency.toDouble()\r\n        })\r\n        viewModel.readFromDataStoreLevel.observe(this,{\r\n                level -> viewModel.TGLevel = level.toDouble()\r\n        })\r\n\r\n\r\n        btnCalPlay.setImageResource(R.drawable.ic_baseline_play_arrow_24)\r\n        viewModel.generatedBitmap.observe(this, {\r\n            calibrationspektrum.setImageBitmap(it)\r\n        })\r\n\r\n        //ASK FOR PERMISSION\r\n        permissionGranted =ActivityCompat.checkSelfPermission(this, permissions[0]) == PackageManager.PERMISSION_GRANTED\r\n        if (!permissionGranted){\r\n            ActivityCompat.requestPermissions(this,permissions, REQUEST_CODE)\r\n        }\r\n\r\n        //ON CLICK LISTENER PLAY BUTTON\r\n        CalPlay.setOnClickListener {\r\n            when{\r\n                isRecording -> calibrationStop()\r\n                else -> calibrationStart()\r\n            }\r\n        }\r\n\r\n        CalPlusButton.setOnClickListener {\r\n            if(isRecording) viewModel.increaseLevelByOne()\r\n        }\r\n\r\n        CalMinusButton.setOnClickListener {\r\n            if(isRecording) viewModel.decreaseLevelByOne()\r\n        }\r\n\r\n        CalSeekBar.setOnSeekBarChangeListener(object:SeekBar.OnSeekBarChangeListener{\r\n            override fun onProgressChanged(seekBar: SeekBar, progress: Int, fromUser: Boolean) {\r\n                viewModel.onSeekBarProgressChanged(progress)\r\n            }\r\n\r\n            override fun onStartTrackingTouch(seekBar: SeekBar) {\r\n            }\r\n\r\n            override fun onStopTrackingTouch(seekBar: SeekBar) {\r\n            }\r\n\r\n        })\r\n\r\n    }\r\n\r\n    fun calibrationStart(){\r\n        if (ActivityCompat.checkSelfPermission(\r\n                this,\r\n                permissions[0]\r\n            ) != PackageManager.PERMISSION_GRANTED\r\n        ){\r\n            ActivityCompat.requestPermissions(this, permissions, REQUEST_CODE)\r\n            return\r\n        }\r\n        else {\r\n            isRecording = true\r\n\r\n            //SET IMAGE RESOURCE\r\n            btnCalPlay.setImageResource(R.drawable.ic_baseline_stop_24)\r\n\r\n            //START TONE GENERATOR\r\n            viewModel.startToneGenerator()\r\n            Toast.makeText(this,\"Humm at ${viewModel.TGFrequency} Hz\",Toast.LENGTH_SHORT).show()\r\n\r\n            //INITIALIZE AUDIO RECORD\r\n            audioRecord = AudioRecord(\r\n                DEFAULT_AUDIO_SOURCE,\r\n                RECORDER_SAMPLE_RATE,\r\n                CHANNEL_CONFIG,\r\n                AUDIO_FORMAT_16,\r\n                MINIMUM_BUFFER_SIZE)\r\n            //7168 > minimum buffer size\r\n\r\n\r\n            if (audioRecord!!.state != AudioRecord.STATE_INITIALIZED) {\r\n                Log.e(TAG, \"error initializing AudioRecord\")\r\n                return\r\n            }\r\n            audioRecord.startRecording()\r\n            viewModel.audioToSpectrum(audioRecord)\r\n        }\r\n    }\r\n\r\n    fun calibrationStop(){\r\n        isRecording = false\r\n\r\n        //SET IMAGE RESOURCE\r\n        btnCalPlay.setImageResource(R.drawable.ic_baseline_play_arrow_24)\r\n\r\n        //STOP TONE GENERATOR\r\n        viewModel.stopToneGenerator()\r\n\r\n        //RELEASE/STOP AUDIO\r\n        Log.d(TAG,\"AUDIORECORD STOPPED WITH ${audioRecord.state} AND ${audioRecord.recordingState}\")\r\n        audioRecord.stop()\r\n        audioRecord.release()\r\n\r\n        //STOP SPECTRUM\r\n    }\r\n\r\n    //MENU\r\n    override fun onCreateOptionsMenu(menu: Menu?): Boolean {\r\n        menuInflater.inflate(R.menu.menuwithsave,menu)\r\n        return true\r\n    }\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        val frequency = viewModel.TGFrequency.toString()\r\n        val level = viewModel.TGLevel.toString()\r\n        when (item.itemId){\r\n            android.R.id.home -> onBackPressed() /*onBackPressed() override*/\r\n            R.id.misave -> viewModel.saveToDataStore(frequency,level)\r\n            R.id.givefeedback -> Toast.makeText(this,\"Thanks for your feedback\",Toast.LENGTH_SHORT).show()\r\n            R.id.closeapp -> finish()\r\n        }\r\n        return true\r\n    }\r\n\r\n    //PERMISSION\r\n    override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        if (requestCode == REQUEST_CODE){\r\n            permissionGranted = grantResults[0] == PackageManager.PERMISSION_GRANTED\r\n        }\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        finish()\r\n        return true\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/hummfinderapp/alpha/calibration/CalibrationActivity.kt b/app/src/main/java/hummfinderapp/alpha/calibration/CalibrationActivity.kt
--- a/app/src/main/java/hummfinderapp/alpha/calibration/CalibrationActivity.kt	(revision ce624f96a70ef7f14c961f9e359533ab408a5343)
+++ b/app/src/main/java/hummfinderapp/alpha/calibration/CalibrationActivity.kt	(date 1681945119474)
@@ -8,6 +8,7 @@
 import androidx.appcompat.app.AppCompatActivity
 import android.os.Bundle
 import android.util.Log
+import android.view.LayoutInflater
 import android.view.Menu
 import android.view.MenuItem
 import android.widget.ImageButton
@@ -15,10 +16,13 @@
 import android.widget.Toast
 import androidx.core.app.ActivityCompat
 import androidx.lifecycle.ViewModelProvider
+import com.google.android.material.slider.Slider
 import hummfinderapp.alpha.R
+import hummfinderapp.alpha.databinding.ActivityCalibrationBinding
+import hummfinderapp.alpha.lineChart.LineChartAdapter
 import kotlinx.android.synthetic.main.activity_calibration.*
 
-val REQUEST_CODE = 200
+const val REQUEST_CODE = 200
 class CalibrationActivity : AppCompatActivity() {
 
     //AUDIO PERMISSION VARIABLES
@@ -29,10 +33,6 @@
     val viewModel by lazy { ViewModelProvider(this).get(calibrationViewModel::class.java) }
     private var isRecording:Boolean = false
     private val TAG = "CALIBRATION ACTIVITY"
-    private val CalPlusButton = findViewById<ImageButton>(R.id.calPlusButton)
-    private val CalMinusButton = findViewById<ImageButton>(R.id.calMinusButton)
-    private val CalSeekBar = findViewById<SeekBar>(R.id.calSeekBar)
-    private val CalPlay = findViewById<ImageButton>(R.id.btnCalPlay)
 
     //AUDIO RECORD VARIABLES
     private var RECORDER_SAMPLE_RATE = 44100
@@ -45,11 +45,29 @@
     private val MINIMUM_BUFFER_SIZE = AudioRecord.getMinBufferSize(
         RECORDER_SAMPLE_RATE, CHANNEL_CONFIG, AUDIO_FORMAT_16)
 
+    // BINDING
+    private lateinit var binding: ActivityCalibrationBinding
+
     override fun onCreate(savedInstanceState: Bundle?) {
+
+        var incomingAudioDatFloat = DoubletoFloatFun(doubleArrayOf(13.892948, 59.698635, 55.112373, 57.098755, 58.472305, 56.818142,56.609764,57.49815,59.00952,55.23705,56.40444,56.185303,60.903244,57.48784,56.749405,61.183464,56.76113,57.331535,56.382984,58.75809,56.61428,57.524967,53.574852,54.23632,56.395878,65.33531,55.734917,61.68308,60.130524,57.973293,55.603493,56.887913,57.147858,54.98452,55.997353,51.65228,61.25847,55.116722,61.63053,53.212738,48.617332,55.21912,52.544666,43.018074,60.104908,50.127594,49.936047,35.444572,32.738087,26.178493,36.929977,39.777588,40.656204,34.34617,30.128878,34.243916,44.61624,35.167053,31.078957,35.77531,39.52803,38.29912,35.347992,43.111652,42.68797,52.435474,36.17814,44.891617,54.233204,41.836174,57.25166,42.187656,48.345684,36.259045,37.019363,40.954094,42.429665,46.45173,39.1066,42.279594,45.243034,46.054195,50.9145,47.652237,45.581154,45.242325,56.921314,49.268147,39.9186,40.29193,47.002834,44.764565,36.242157,43.80288,38.52606,36.456383,47.591,36.165276,39.46079,45.899883,47.04579,46.302986,36.788834,44.37502,45.05159,49.155342,34.555843,37.49816,29.939594,40.056538,34.404865,38.073124,46.73672,33.991844,42.269478,46.202614,36.083675,47.70226,47.514782,38.58498,34.5941,43.307175,31.940336,46.33131,36.46543,40.862984,39.9438,53.349957,41.254,40.21264,43.232338,37.38666,37.308365,44.419483,42.455833,42.91063,45.75903,43.028088,34.117016,47.352795,55.469383,34.535225,35.32695,40.497242,35.131306,34.836555,39.688896,42.30889,34.84081,44.179173,36.501373,44.865196,39.999866,43.731617,47.356243,40.347233,43.736946,43.95775,46.260696,41.83732,39.161667,44.821167,48.15636,42.419987,38.234543,41.62893,44.76936,47.093662,40.184868,49.635845,40.559204,46.196,33.025795,51.40435,38.068092,42.39981,43.20738,44.031357,38.68127,43.206974,49.509045,45.997063,42.930492,51.990353,44.71576,39.0692,36.39626,50.783386,36.63373,36.944965,38.865616,46.08006,32.357094,44.139767,37.143105,37.997417,36.44595,40.758186,36.879883,41.41723,55.540474,35.09837,34.036118,46.75285,35.998196,37.34082,43.819756,42.640846,40.047234,38.89786,41.67934,40.04627,41.006733,36.15423,42.109703,33.771664,33.856907,40.056797,34.274345,37.18197,30.034506,27.178679,20.000324,0.0,22.42825,27.481546,31.41653,34.919792,38.063713,36.21323,38.01957,36.685913,36.12567,41.507607,45.67217,37.205235,42.39415,40.444595,43.363308,46.457397,60.128174,44.94736,51.716133,39.607895,46.182602,50.074936,50.829144,37.475773,48.692352,42.840195,52.262913,42.83107,50.82703,50.812645,38.98298,44.45049,40.893597,48.306976,43.865643,49.09779,51.522964,55.20366,56.28295,47.889404,46.941227,44.162453,43.792286,45.823868,45.5625,49.96968,60.22943,42.68344,44.835148,39.964287,61.43064,56.616207,46.650063,43.774193,48.057022,35.921703,48.962425,47.602955,47.032173,52.926563,42.154274,45.817238,38.864098,47.66498,47.713886,56.17853,44.89607,46.763157,52.766205,55.27216,48.22843,40.109882,45.004868,53.55932,48.690887,45.02852))
+        var incomingAudioDatFloat2 = DoubletoFloatFun(doubleArrayOf(13.923067,78.985695,68.544945,70.63808,64.85617,73.05572,65.44387,66.96768,68.46693,63.536095,68.79628,66.19611,59.7023,68.39061,67.074135,73.1961,64.48186,64.971504,63.432243,64.53577,66.794266,60.010536,56.56655,62.636982,54.874878,61.184826,65.09775,59.478012,60.50693,63.63228,69.95147,71.21765,69.30009,69.7857,68.2441,63.06492,57.943554,62.31319,58.847946,54.601254,51.290127,49.489975,54.568443,50.031357,47.194767,45.855083,56.67279,33.930153,32.679478,26.296467,36.842873,42.253746,40.824997,33.515633,30.076902,35.778255,41.805325,37.132637,31.135914,34.11458,42.967262,36.617798,37.481773,49.852196,60.041115,46.29973,40.85073,43.446907,41.94005,39.350544,42.45895,42.02706,39.309227,35.3252,43.288353,54.462204,43.766674,38.750225,42.382324,39.44129,66.782326,42.539726,42.86451,42.192593,41.84519,38.869556,43.336678,42.326435,47.39245,46.98769,46.936394,40.39415,35.83015,46.78959,39.11577,37.049755,48.28202,35.347855,41.58714,43.38192,55.26355,44.47277,38.88592,47.737144,53.678364,49.986073,36.083466,35.588615,29.218166,44.499535,35.40017,37.241158,49.204937,34.550728,42.8785,47.999195,36.949245,43.614975,44.43832,36.687096,33.49288,46.179543,32.21734,42.331448,39.43631,40.677963,39.984173,39.60585,49.414448,35.189163,51.412857,39.18927,37.827793,46.664528,40.246525,39.822357,66.78059,56.109066,38.148785,42.515606,40.65948,34.92955,40.04393,36.01899,36.63613,36.938747,37.05931,37.561115,32.811543,43.175922,37.142883,53.47818,41.512238,45.647552,58.1201,45.61135,47.43498,56.48497,41.408585,45.85977,38.947113,42.291435,48.54487,44.67482,37.024223,42.501976,44.793533,48.13982,37.97848,47.49875,44.674587,48.353027,32.50778,43.785065,37.16082,42.71767,44.349655,41.176796,44.112907,39.049652,43.28907,44.423103,50.212677,45.39073,47.53281,37.393867,36.16497,42.22547,37.467834,39.26812,39.428093,45.11281,32.875698,39.67394,39.820633,36.798622,37.364834,42.085655,36.80492,43.448734,50.476116,37.035244,38.451675,38.181656,40.47195,38.271114,43.909508,43.54258,41.694534,52.119522,36.38243,43.459515,44.247322,38.07376,39.106297,35.640827,36.1772,39.485126,33.38237,31.478542,30.532673,28.175413,19.978298,0.0,22.080812,28.870823,31.42496,33.939785,34.911217,37.773277,38.857147,38.469246,40.090996,39.80809,37.30106,32.526608,42.717228,41.193027,42.76422,56.944862,47.5034,53.619846,45.11614,45.205345,46.422897,42.9134,58.04364,36.81093,43.436577,43.7532,39.998734,62.164402,44.48605,47.060577,41.011353,47.577644,42.296074,43.569874,41.23735,43.891586,61.12435,63.393112,62.232307,49.81787,46.21666,51.36776,46.41829,40.61801,41.514748,47.56201,48.019073,39.29879,45.777206,42.418327,45.858315,48.58208,44.168934,49.38276,49.02151,37.50484,50.163483,52.92233,56.838524,56.492886,46.086063,46.744736,37.65776,46.343605,49.5197,56.107082,45.23223,46.625134,52.524673,52.7566,49.2362,39.19253,43.95658,47.673325,47.846313,42.810516))
+
         super.onCreate(savedInstanceState)
-        setContentView(R.layout.activity_calibration)
+        binding = ActivityCalibrationBinding.inflate(layoutInflater)
+        setContentView(binding.root)
+        //setContentView(R.layout.activity_calibration)
         supportActionBar?.setDisplayHomeAsUpEnabled(true)
 
+        /*binding.lcvLineView.apply {
+
+        }*/
+
+        val CalPlusButton = findViewById<ImageButton>(R.id.calPlusButton)
+        val CalMinusButton = findViewById<ImageButton>(R.id.calMinusButton)
+        val slider = findViewById<Slider>(R.id.calSeekBar)
+        val CalPlay = findViewById<ImageButton>(R.id.btnCalPlay)
+
         //LEVEL OBSERVE
         //viewModel.level().observe(this, {})
 
@@ -60,10 +78,18 @@
                 level -> viewModel.TGLevel = level.toDouble()
         })
 
-
+        //change to viewbinding
         btnCalPlay.setImageResource(R.drawable.ic_baseline_play_arrow_24)
-        viewModel.generatedBitmap.observe(this, {
-            calibrationspektrum.setImageBitmap(it)
+
+        //viewModel.generatedBitmap.observe(this, {
+            //calibrationspektrum.setImageBitmap(it)
+        //})
+
+        viewModel.decibelValuesToSpectrum().observe(this, {
+            binding.lcvLineView.apply {
+                adapter = LineChartAdapter()
+                (this.adapter as LineChartAdapter).setData(it)
+            }
         })
 
         //ASK FOR PERMISSION
@@ -88,19 +114,22 @@
             if(isRecording) viewModel.decreaseLevelByOne()
         }
 
-        CalSeekBar.setOnSeekBarChangeListener(object:SeekBar.OnSeekBarChangeListener{
-            override fun onProgressChanged(seekBar: SeekBar, progress: Int, fromUser: Boolean) {
-                viewModel.onSeekBarProgressChanged(progress)
-            }
 
-            override fun onStartTrackingTouch(seekBar: SeekBar) {
+        slider.addOnSliderTouchListener(object: Slider.OnSliderTouchListener {
+            override fun onStartTrackingTouch(slider: Slider) {
             }
 
-            override fun onStopTrackingTouch(seekBar: SeekBar) {
+            override fun onStopTrackingTouch(slider: Slider) {
             }
 
         })
 
+        slider.addOnChangeListener(object : Slider.OnChangeListener{
+            override fun onValueChange(slider: Slider, value: Float, fromUser: Boolean) {
+                viewModel.onSeekBarProgressChanged(value)
+            }
+
+        })
     }
 
     fun calibrationStart(){
Index: app/src/main/java/hummfinderapp/alpha/matching/MatchingActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package hummfinderapp.alpha.matching\r\n\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.view.Menu\r\nimport android.view.MenuItem\r\nimport android.widget.ImageButton\r\nimport android.widget.SeekBar\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport hummfinderapp.alpha.R\r\n\r\n\r\nclass MatchingActivity : AppCompatActivity() {\r\n\r\n    lateinit var TextMatching: TextView\r\n    val viewModel by lazy { ViewModelProvider(this).get(MatchingActivityViewModel::class.java) }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_matching)\r\n        supportActionBar?.setDisplayHomeAsUpEnabled(true)\r\n\r\n        TextMatching = findViewById<TextView>(R.id.TextMatching)\r\n        val decreaseFrequency = findViewById<ImageButton>(R.id.decreaseFrequency)\r\n        val increaseFrequency = findViewById<ImageButton>(R.id.increaseFrequency)\r\n        val seekBar = findViewById<SeekBar>(R.id.matchingSeekBar)\r\n        val TAG = \"MATCHING ACTIVITY\"\r\n        val MAX_FREQUENCY = 500\r\n        var END_ONSTOP = 0\r\n        var BUTTON_STATE = 0\r\n\r\n        val statefulbutton = findViewById<ImageButton>(R.id.startTone)\r\n        statefulbutton.setImageResource(R.drawable.ic_baseline_play_arrow_24)\r\n\r\n        viewModel.frequency().observe(this,{\r\n            TextMatching.text = it.toString()\r\n            seekBar.progress = it\r\n        })\r\n\r\n        //OBSERVE FREQUENCY\r\n        viewModel.readFromDataStoreFrequency.observe(this,{\r\n                frequency -> viewModel.TGFrequency = frequency.toDouble()\r\n        })\r\n\r\n        //OBSERVE LEVEL\r\n        viewModel.readFromDataStoreLevel.observe(this,{\r\n            level -> viewModel.TGLevel = level.toDouble()\r\n        })\r\n\r\n        statefulbutton.setOnClickListener {\r\n            if (BUTTON_STATE == 0){\r\n                viewModel.startToneGenerator()\r\n                BUTTON_STATE = 1\r\n                statefulbutton.setImageResource(R.drawable.ic_baseline_stop_24)\r\n            }\r\n            else{\r\n                viewModel.stopToneGenerator()\r\n                BUTTON_STATE = 0\r\n                statefulbutton.setImageResource(R.drawable.ic_baseline_play_arrow_24)\r\n            }\r\n        }\r\n\r\n        increaseFrequency.setOnClickListener {\r\n            if (viewModel.TGFrequency.toInt() != MAX_FREQUENCY){\r\n                viewModel.increaseFrequencyByOne()\r\n            }\r\n            else{\r\n                Toast.makeText(this,\"Maximum Frequency reached\",Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n\r\n        decreaseFrequency.setOnClickListener {\r\n                END_ONSTOP = viewModel.TGFrequency.toInt()\r\n                if (END_ONSTOP != 0){\r\n                    viewModel.decreaseFrequencyByOne()\r\n                    if (END_ONSTOP == 30){\r\n                        Toast.makeText(this@MatchingActivity, \"Below large speaker threshold\",Toast.LENGTH_SHORT).show()\r\n                    }\r\n                    else if (END_ONSTOP == 50){\r\n                        Toast.makeText(this@MatchingActivity, \"Below in-ear headphone threshold\",Toast.LENGTH_SHORT).show()\r\n                    }\r\n                    else if (END_ONSTOP == 80){\r\n                        Toast.makeText(this@MatchingActivity, \"Below bluetooth speaker threshold\",Toast.LENGTH_SHORT).show()\r\n                    }\r\n                    else if (END_ONSTOP == 100){\r\n                        Toast.makeText(this@MatchingActivity, \"Below smartphone speaker threshold\",Toast.LENGTH_SHORT).show()\r\n                    }\r\n                }\r\n            else{\r\n                Toast.makeText(this,\"Minimum Frequency reached\",Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n\r\n        seekBar.max = (MAX_FREQUENCY - 0)\r\n\r\n        seekBar.setOnSeekBarChangeListener(object: SeekBar.OnSeekBarChangeListener{\r\n            override fun onProgressChanged(seekBar:SeekBar?, progress: Int, fromUser: Boolean) {\r\n                viewModel.onSeekBarProgressChanged(progress)\r\n            }\r\n            override fun onStartTrackingTouch(seekBar:SeekBar?) {}\r\n            override fun onStopTrackingTouch(seekBar:SeekBar?) {\r\n                if (seekBar != null) {\r\n                    END_ONSTOP = seekBar.progress\r\n                    if (END_ONSTOP < 30){\r\n                        return Toast.makeText(this@MatchingActivity, \"Below large speaker threshold\",Toast.LENGTH_SHORT).show()\r\n                    }\r\n                    else if (END_ONSTOP < 50){\r\n                        return Toast.makeText(this@MatchingActivity, \"Below in-ear headphone threshold\",Toast.LENGTH_SHORT).show()\r\n                    }\r\n                    else if (END_ONSTOP < 80){\r\n                        return Toast.makeText(this@MatchingActivity, \"Below bluetooth speaker threshold\",Toast.LENGTH_SHORT).show()\r\n                    }\r\n                    else if (END_ONSTOP < 100){\r\n                        return Toast.makeText(this@MatchingActivity, \"Below smartphone speaker threshold\",Toast.LENGTH_SHORT).show()\r\n                    }\r\n\r\n                }\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu?): Boolean {\r\n        menuInflater.inflate(R.menu.menuwithsave,menu)\r\n        return true\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        val frequency = TextMatching.text.toString()\r\n        val level = \"0.3\"\r\n        when (item.itemId){\r\n            android.R.id.home -> onBackPressed() /*onBackPressed() override*/\r\n            R.id.misave -> viewModel.saveToDataStore(frequency, level)\r\n            R.id.givefeedback -> Toast.makeText(this,\"Thanks for your feedback\",Toast.LENGTH_SHORT).show()\r\n            R.id.closeapp -> finish()\r\n        }\r\n        return true\r\n    }\r\n\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        finish()\r\n        return true\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/hummfinderapp/alpha/matching/MatchingActivity.kt b/app/src/main/java/hummfinderapp/alpha/matching/MatchingActivity.kt
--- a/app/src/main/java/hummfinderapp/alpha/matching/MatchingActivity.kt	(revision ce624f96a70ef7f14c961f9e359533ab408a5343)
+++ b/app/src/main/java/hummfinderapp/alpha/matching/MatchingActivity.kt	(date 1668792626620)
@@ -9,6 +9,7 @@
 import android.widget.TextView
 import android.widget.Toast
 import androidx.lifecycle.ViewModelProvider
+import com.google.android.material.slider.Slider
 import hummfinderapp.alpha.R
 
 
@@ -25,10 +26,10 @@
         TextMatching = findViewById<TextView>(R.id.TextMatching)
         val decreaseFrequency = findViewById<ImageButton>(R.id.decreaseFrequency)
         val increaseFrequency = findViewById<ImageButton>(R.id.increaseFrequency)
-        val seekBar = findViewById<SeekBar>(R.id.matchingSeekBar)
+        val slider = findViewById<Slider>(R.id.matchingSeekBar)
         val TAG = "MATCHING ACTIVITY"
         val MAX_FREQUENCY = 500
-        var END_ONSTOP = 0
+        var END_ONSTOP = 0.0
         var BUTTON_STATE = 0
 
         val statefulbutton = findViewById<ImageButton>(R.id.startTone)
@@ -36,7 +37,7 @@
 
         viewModel.frequency().observe(this,{
             TextMatching.text = it.toString()
-            seekBar.progress = it
+            slider.value = it.toFloat()
         })
 
         //OBSERVE FREQUENCY
@@ -72,19 +73,19 @@
         }
 
         decreaseFrequency.setOnClickListener {
-                END_ONSTOP = viewModel.TGFrequency.toInt()
-                if (END_ONSTOP != 0){
+                END_ONSTOP = viewModel.TGFrequency
+                if (END_ONSTOP != 0.0){
                     viewModel.decreaseFrequencyByOne()
-                    if (END_ONSTOP == 30){
+                    if (END_ONSTOP == 30.0){
                         Toast.makeText(this@MatchingActivity, "Below large speaker threshold",Toast.LENGTH_SHORT).show()
                     }
-                    else if (END_ONSTOP == 50){
+                    else if (END_ONSTOP == 50.0){
                         Toast.makeText(this@MatchingActivity, "Below in-ear headphone threshold",Toast.LENGTH_SHORT).show()
                     }
-                    else if (END_ONSTOP == 80){
+                    else if (END_ONSTOP == 80.0){
                         Toast.makeText(this@MatchingActivity, "Below bluetooth speaker threshold",Toast.LENGTH_SHORT).show()
                     }
-                    else if (END_ONSTOP == 100){
+                    else if (END_ONSTOP == 100.0){
                         Toast.makeText(this@MatchingActivity, "Below smartphone speaker threshold",Toast.LENGTH_SHORT).show()
                     }
                 }
@@ -93,33 +94,36 @@
             }
         }
 
-        seekBar.max = (MAX_FREQUENCY - 0)
+        slider.valueTo = MAX_FREQUENCY.toFloat()
 
-        seekBar.setOnSeekBarChangeListener(object: SeekBar.OnSeekBarChangeListener{
-            override fun onProgressChanged(seekBar:SeekBar?, progress: Int, fromUser: Boolean) {
-                viewModel.onSeekBarProgressChanged(progress)
+        slider.addOnSliderTouchListener(object: Slider.OnSliderTouchListener{
+            override fun onStartTrackingTouch(slider: Slider) {
             }
-            override fun onStartTrackingTouch(seekBar:SeekBar?) {}
-            override fun onStopTrackingTouch(seekBar:SeekBar?) {
-                if (seekBar != null) {
-                    END_ONSTOP = seekBar.progress
-                    if (END_ONSTOP < 30){
+
+            override fun onStopTrackingTouch(slider: Slider) {
+                if (slider != null) {
+                    END_ONSTOP = slider.value.toDouble()
+                    if (END_ONSTOP < 30.0){
                         return Toast.makeText(this@MatchingActivity, "Below large speaker threshold",Toast.LENGTH_SHORT).show()
                     }
-                    else if (END_ONSTOP < 50){
+                    else if (END_ONSTOP < 50.0){
                         return Toast.makeText(this@MatchingActivity, "Below in-ear headphone threshold",Toast.LENGTH_SHORT).show()
                     }
-                    else if (END_ONSTOP < 80){
+                    else if (END_ONSTOP < 80.0){
                         return Toast.makeText(this@MatchingActivity, "Below bluetooth speaker threshold",Toast.LENGTH_SHORT).show()
                     }
-                    else if (END_ONSTOP < 100){
+                    else if (END_ONSTOP < 100.0){
                         return Toast.makeText(this@MatchingActivity, "Below smartphone speaker threshold",Toast.LENGTH_SHORT).show()
                     }
-
                 }
             }
         })
-
+        
+        slider.addOnChangeListener(object : Slider.OnChangeListener {
+            override fun onValueChange(slider: Slider, value: Float, fromUser: Boolean) {
+                viewModel.onSeekBarProgressChanged(value)
+            }
+        })
     }
 
     override fun onCreateOptionsMenu(menu: Menu?): Boolean {
Index: app/src/main/java/hummfinderapp/alpha/lineChart/ChartAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/hummfinderapp/alpha/lineChart/ChartAdapter.kt b/app/src/main/java/hummfinderapp/alpha/lineChart/ChartAdapter.kt
new file mode 100644
--- /dev/null	(date 1681927107198)
+++ b/app/src/main/java/hummfinderapp/alpha/lineChart/ChartAdapter.kt	(date 1681927107198)
@@ -0,0 +1,71 @@
+package hummfinderapp.alpha.lineChart
+
+import android.database.DataSetObservable
+import android.database.DataSetObserver
+import android.graphics.RectF
+
+abstract class ChartAdapter {
+    private val observable = DataSetObservable() //to notify object change, we will use LiveData
+    //private var dataObs = MutableLiveData<ArrayList<Float>>()
+    open val baseLine: Float = 0.0f
+
+    //can be overridden but not compulsory
+    open val dataBounds: RectF
+        get() {
+            val count = count
+            val hasBaseLine = hasBaseLine()
+            var minY =
+                if (hasBaseLine) baseLine else Float.MAX_VALUE
+            var maxY = if (hasBaseLine) minY else -Float.MAX_VALUE
+            var minX = Float.MAX_VALUE
+            var maxX = -Float.MAX_VALUE
+            for (i in 0 until count) {
+                val x = getX(i)
+                minX = minX.coerceAtMost(x)
+                maxX = maxX.coerceAtLeast(x)
+                val y = getY(i)
+                minY = minY.coerceAtMost(y)
+                maxY = maxY.coerceAtLeast(y)
+            }
+
+            return createRectF(minX, minY, maxX, maxY)
+        }
+
+    private fun createRectF(
+        left: Float,
+        top: Float,
+        right: Float,
+        bottom: Float
+    ): RectF = RectF(left, top, right, bottom)
+
+    //abstract methods needs to be overridden by sub-class or child
+    abstract val count : Int
+
+    abstract fun getItem(index: Int): Any
+
+    abstract fun getY(index: Int): Float
+
+    fun getX(index: Int): Float =
+        index.toFloat()
+
+    open fun hasBaseLine(): Boolean =
+        false
+
+
+    //functions related to dataobservable, we can change to livedata
+    fun notifyDataSetChanged() {
+        observable.notifyChanged()
+    }
+
+    fun notifyDataSetInvalidated() {
+        observable.notifyInvalidated()
+    }
+
+    fun registerDataSetObserver(observer: DataSetObserver) {
+        observable.registerObserver(observer)
+    }
+
+    fun unregisterDataSetObserver(observer: DataSetObserver) {
+        observable.unregisterObserver(observer)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/hummfinderapp/alpha/lineChart/LineChartAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/hummfinderapp/alpha/lineChart/LineChartAdapter.kt b/app/src/main/java/hummfinderapp/alpha/lineChart/LineChartAdapter.kt
new file mode 100644
--- /dev/null	(date 1681927123002)
+++ b/app/src/main/java/hummfinderapp/alpha/lineChart/LineChartAdapter.kt	(date 1681927123002)
@@ -0,0 +1,31 @@
+package hummfinderapp.alpha.lineChart
+
+open class LineChartAdapter(private var yData: FloatArray = floatArrayOf()) : ChartAdapter() {
+
+    override val count: Int
+        get() = yData.size
+
+    open fun setData(yData: FloatArray) {
+        this.yData = yData
+        notifyDataSetChanged()
+    }
+
+    override fun hasBaseLine(): Boolean {
+        for (value in yData) {
+            if (value < 0)
+                return true
+        }
+        return false
+    }
+
+    override fun getItem(index: Int): Any =
+        yData[index]
+
+    override fun getY(index: Int): Float =
+        yData[index]
+
+    //clears data
+    fun clearData(){
+        setData(floatArrayOf())
+    }
+}
\ No newline at end of file
Index: app/src/main/res/values/attrs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/attrs.xml b/app/src/main/res/values/attrs.xml
new file mode 100644
--- /dev/null	(date 1681927246523)
+++ b/app/src/main/res/values/attrs.xml	(date 1681927246523)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <declare-styleable name="LineChartView_linechart_lineWidth">3.0</declare-styleable>
+    <declare-styleable name="LineChartView">0</declare-styleable>
+    <attr name="LineChartStyle" />
+</resources>
\ No newline at end of file
Index: app/src/main/res/values/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/styles.xml b/app/src/main/res/values/styles.xml
new file mode 100644
--- /dev/null	(date 1681927265776)
+++ b/app/src/main/res/values/styles.xml	(date 1681927265776)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <style name="LineChartView">0</style>
+</resources>
\ No newline at end of file
Index: app/src/main/java/hummfinderapp/alpha/lineChart/ScaleHelper.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/hummfinderapp/alpha/lineChart/ScaleHelper.kt b/app/src/main/java/hummfinderapp/alpha/lineChart/ScaleHelper.kt
new file mode 100644
--- /dev/null	(date 1681927145804)
+++ b/app/src/main/java/hummfinderapp/alpha/lineChart/ScaleHelper.kt	(date 1681927145804)
@@ -0,0 +1,46 @@
+package hummfinderapp.alpha.lineChart
+
+import android.graphics.RectF
+
+class ScaleHelper(adapter: ChartAdapter, contentRect: RectF, lineWidth: Float) {
+    val width: Float
+    val height: Float
+    val size: Int
+    private val xScale: Float
+    private val yScale: Float
+    private val xTranslation: Float
+    private val yTranslation: Float
+
+    init {
+        val leftPadding = contentRect.left
+        val topPadding = contentRect.top
+
+        this.width = contentRect.width() - lineWidth
+        this.height = contentRect.height() - lineWidth
+
+        this.size = adapter.count
+
+        val bounds = adapter.dataBounds
+
+        bounds.inset((if (bounds.width() == 0f) -1 else 0).toFloat(), (if (bounds.height() == 0f) -1 else 0).toFloat())
+
+        val minX = bounds.left
+        val maxX = bounds.right
+        val minY = bounds.top
+        val maxY = bounds.bottom
+
+
+        this.xScale = width / (maxX - minX)
+        this.xTranslation = leftPadding - minX * xScale + lineWidth / 2
+        this.yScale = height / (maxY - minY)
+        this.yTranslation = minY * yScale + topPadding + lineWidth / 2
+    }
+
+    fun getX(rawX: Float): Float =
+        rawX * xScale + xTranslation
+
+
+    fun getY(rawY: Float): Float =
+        height - rawY * yScale + yTranslation
+
+}
\ No newline at end of file
Index: app/src/main/java/hummfinderapp/alpha/calibration/utils.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package hummfinderapp.alpha.calibration\r\n\r\nimport kotlin.math.*\r\n\r\n/**\r\n * Computes the absolute values of the complex valued result from the FFT.\r\n * The output size is (input.size / 2) + 1.\r\n *\r\n * @param input FloatArray that comes from FloatFFT_1D.realForward()\r\n */\r\nfun absoluteFromComplex(input: FloatArray): FloatArray {\r\n    var output = FloatArray(input.size / 2) { i ->\r\n        //sqrt(input[2 * i].pow(2) + input[2 * i + 1].pow(2))\r\n        hypot(input[2 * i].toDouble(), input[2 * i + 1].toDouble()).toFloat()\r\n    }\r\n    output[0] = input[0].absoluteValue\r\n    output += input[1].absoluteValue\r\n\r\n    return output\r\n}\r\n\r\n/**\r\n * Computes the decibel (logarithmic) values from absolutes\r\n *\r\n * @param input FloatArray of absolute values\r\n */\r\nfun decibelFromAbsolute(input: FloatArray): FloatArray {\r\n    val maxValue = input.maxOrNull()!!\r\n\r\n    return FloatArray(input.size) {\r\n        20f * log10(input[it] / maxValue)\r\n    }\r\n}\r\n\r\nfun decibelFromAbsoluteReverse(input: FloatArray): FloatArray {\r\n    val maxValue = input.maxOrNull()!!\r\n\r\n    return FloatArray(input.size) {\r\n        20f * log10(maxValue / input[it])\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/hummfinderapp/alpha/calibration/utils.kt b/app/src/main/java/hummfinderapp/alpha/calibration/utils.kt
--- a/app/src/main/java/hummfinderapp/alpha/calibration/utils.kt	(revision ce624f96a70ef7f14c961f9e359533ab408a5343)
+++ b/app/src/main/java/hummfinderapp/alpha/calibration/utils.kt	(date 1681926665292)
@@ -38,4 +38,10 @@
     return FloatArray(input.size) {
         20f * log10(maxValue / input[it])
     }
+}
+
+fun DoubletoFloatFun(input: DoubleArray): FloatArray{
+    return FloatArray(input.size){
+        input[it].toFloat()
+    }
 }
\ No newline at end of file
Index: app/src/main/java/hummfinderapp/alpha/lineChart/LineChartView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/hummfinderapp/alpha/lineChart/LineChartView.kt b/app/src/main/java/hummfinderapp/alpha/lineChart/LineChartView.kt
new file mode 100644
--- /dev/null	(date 1682526699485)
+++ b/app/src/main/java/hummfinderapp/alpha/lineChart/LineChartView.kt	(date 1682526699485)
@@ -0,0 +1,273 @@
+package hummfinderapp.alpha.lineChart
+
+import android.content.Context
+import android.content.res.TypedArray
+import android.database.DataSetObserver
+import android.graphics.*
+import android.os.Build
+import android.util.AttributeSet
+import android.view.View
+import androidx.annotation.ColorInt
+import androidx.core.content.ContextCompat
+import hummfinderapp.alpha.R
+
+
+import java.util.*
+import kotlin.math.log10
+
+class LineChartView @JvmOverloads constructor(
+    context: Context,
+    attrs: AttributeSet? = null,
+    defStyleAttr: Int = R.attr.LineChartStyle,
+    defStyleRes: Int = R.style.LineChartView
+) : View(context, attrs, defStyleAttr){
+
+    var lineWidth: Float = 3.0f
+    var adapter: ChartAdapter? = null
+        set(value) {
+            field?.unregisterDataSetObserver(dataSetObserver)
+            field = value
+            field?.registerDataSetObserver(dataSetObserver)
+            populatePath()
+        }
+
+    private val linePath = Path()
+    private val renderPath = Path()
+    private var scaleHelper: ScaleHelper? = null
+    private val contentRect = RectF()
+    private val contentRectMain = RectF()
+    private val contentRectAdapter = RectF()
+
+    private val dataSetObserver = object : DataSetObserver() {
+
+        override fun onChanged() {
+            super.onChanged()
+            populatePath()
+        }
+
+        override fun onInvalidated() {
+            super.onInvalidated()
+            clearData()
+        }
+    }
+
+    init {
+    }
+
+    private var linePaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {
+        style = Paint.Style.STROKE
+        color = Color.parseColor("#37A1D1")
+        strokeWidth = lineWidth
+        strokeMiter = 2f
+        strokeCap = Paint.Cap.SQUARE
+        pathEffect = CornerPathEffect(2f)
+    }
+
+    private var axesPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {
+        style = Paint.Style.STROKE
+        color = Color.parseColor("#BBBBBB")
+        strokeWidth = lineWidth
+        strokeMiter = 2f
+        strokeCap = Paint.Cap.SQUARE
+        pathEffect = CornerPathEffect(0f)
+    }
+
+    private var axesLabelPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {
+        style = Paint.Style.FILL
+        textAlign = Paint.Align.CENTER
+        color = Color.BLACK
+        textSize = 18.0f
+    }
+
+    private fun populatePath() {
+        if (adapter == null || width == 0 || height == 0)
+            return
+
+        if (adapter!!.count < 2) {
+            clearData()
+            return
+        }
+
+        scaleHelper = ScaleHelper(adapter!!, contentRect, lineWidth)
+        linePath.reset()
+
+        for (i in 0 until adapter!!.count) {
+            if (i < adapter!!.count) {
+                val x = scaleHelper!!.getX(adapter!!.getX(i))
+                val y = scaleHelper!!.getY(adapter!!.getY(i))
+
+                if (i == 0)
+                    linePath.moveTo(x, y)
+                else
+                    linePath.lineTo(x, y)
+            }
+        }
+        //render axes and tics if possible
+        renderPath.reset()
+        renderPath.addPath(linePath)
+        invalidate()
+    }
+
+    /*private fun getYByIndex(index: Int) = scaleHelper!!.getY(adapter!!.getY(index))*/
+
+    private fun clearData() {
+        scaleHelper = null
+        renderPath.reset()
+        linePath.reset()
+        invalidate()
+    }
+
+    /*
+    private fun updateContentRect() {
+        contentRect.set(
+            paddingStart.toFloat(),
+            paddingTop.toFloat(),
+            (width - paddingEnd).toFloat(),
+            (height - paddingBottom).toFloat()
+        )
+    }*/
+
+    private fun updateContentRectMain(){
+        contentRectMain.set(
+            paddingStart.toFloat(),
+            paddingTop.toFloat(),
+            (width - paddingEnd).toFloat(),
+            (height - paddingBottom).toFloat()
+        )
+    }
+
+    private fun updateContentRectAdapter(){
+        contentRectAdapter.set(
+            contentRectMain.left + 60.0f,
+            contentRectMain.top + 30.0f,
+            contentRectMain.right - 30.0f,
+            contentRectMain.bottom - 60.0f
+        )
+    }
+    private fun updateContentRect() {
+        contentRect.set(
+            contentRectAdapter.left,
+            contentRectAdapter.top,
+            contentRectAdapter.right,
+            contentRectAdapter.bottom
+        )
+    }
+
+    //Guidelines Spacing: TODO: Taking out calculation responsibilities from onDraw method
+    //private fun gridLineSpacing(contentRectF: RectF, gridLineXisTrue: Boolean):FloatArray{
+    private fun gridLineSpacing(gridLineXisTrue: Boolean):FloatArray{
+        if (gridLineXisTrue){
+            //200Hz: 1 Tick: 10 (200/20)
+            //val gridLineSpacingX: Float = contentRectF.width()/2.3f //for Log scale
+
+            /* LOG SCALE */
+            /*
+            println("gridLineSpacingX: $gridLineSpacingX")
+            var spacingXinit: FloatArray = floatArrayOf(1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f,
+                20.0f, 30.0f, 40.0f, 50.0f, 60.0f, 70.0f, 80.0f, 90.0f, 100.0f, 200.0f, 300.0f, 400.0f)
+            for (i in spacingXinit){
+                spacingX += contentRect.left + (log10(i) * gridLineSpacingX)
+            }
+            */
+
+            /* LINEAR SCALE */
+            val gridLineSpacingX: Float = contentRect.width()/20.0f //for Linear scale
+            var spacingX = FloatArray(20)
+            for (j in 0..19){
+                spacingX += contentRect.left + j * gridLineSpacingX
+            }
+            return spacingX
+        }
+        else{
+            var gridLineSpacingY: Float = contentRect.height()/14f
+            var spacingY = FloatArray(14)
+            for (i in 0..13){
+                spacingY += contentRect.top + i * gridLineSpacingY
+            }
+            return spacingY
+        }
+    }
+
+    //Axis Labels
+    private fun getXAxisLabels():FloatArray {
+        var xLabelsMeasure = FloatArray(11)
+        //val axisLineSpacingX: Float = contentRectS.width()/20.0f
+        val axisLineSpacingX: Float = contentRect.width()/10.0f
+        //for Linear scale
+        for (j in 1..10){
+            xLabelsMeasure += j * axisLineSpacingX
+        }
+        return xLabelsMeasure
+    }
+
+    private fun getxAxisLabelText(): FloatArray{
+        var labelText = FloatArray(10)
+        for (m in 0..200 step 20){
+            labelText += m.toFloat()
+        }
+        return labelText
+    }
+
+    private fun getYAxisLabels(): FloatArray {
+        var yLabelsMeasure = FloatArray(6)
+        val axisLineSpacingX: Float = contentRect.height()/7f   //linear scale
+        for (j in 0..7){
+            yLabelsMeasure += j * axisLineSpacingX
+        }
+        return yLabelsMeasure
+    }
+
+    private fun getyAxisLabelText(): FloatArray{
+        var labelText = FloatArray(6)
+        for (n in 0 downTo -140 step 20){
+            labelText += n.toFloat()
+        }
+        return labelText
+    }
+
+    override fun onSizeChanged(w: Int, h: Int, oldW: Int, oldH: Int) {
+        super.onSizeChanged(w, h, oldW, oldH)
+        updateContentRectMain()
+        updateContentRectAdapter()
+        updateContentRect()
+        populatePath()
+    }
+
+    override fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {
+        super.setPadding(left, top, right, bottom)
+        updateContentRectMain()
+        updateContentRectAdapter()
+        updateContentRect()
+        populatePath()
+    }
+
+    override fun onDraw(canvas: Canvas) {
+        super.onDraw(canvas)
+        canvas.drawPath(renderPath, linePaint)
+        canvas.drawRect(contentRect, axesPaint)
+        //Grid y-axis
+        val guideLineSpacingY: FloatArray = gridLineSpacing(false)
+        for (i in guideLineSpacingY){
+            canvas.drawLine(contentRect.left, i, contentRect.right, i, axesPaint)
+        }
+        //grid x-axis
+        val guideLineSpacingX: FloatArray = gridLineSpacing(true)
+        for (j in guideLineSpacingX){
+            canvas.drawLine(j, contentRect.bottom, j, contentRect.top, axesPaint)
+        }
+
+        val getxAxisLabels: FloatArray = getXAxisLabels()
+        val getxAxisLabelText: FloatArray = getxAxisLabelText()
+        getxAxisLabels.forEachIndexed { index, fl -> //i , arr[i]
+            canvas.drawText(getxAxisLabelText[index].toString(), contentRect.left + fl, contentRectMain.bottom - 20.0f, axesLabelPaint)
+            //canvas.drawText(fl.toString(), contentRect.left + fl, contentRectMain.bottom - 20.0f, axesLabelPaint)
+        }
+
+        val getyAxisLabels: FloatArray = getYAxisLabels()
+        val getyAxisLabelText: FloatArray = getyAxisLabelText()
+        getyAxisLabels.forEachIndexed { index, fl ->
+            canvas.drawText(getyAxisLabelText[index].toString(), contentRectMain.left + 30.0f, contentRect.top + fl + 8.0f, axesLabelPaint)
+        }
+    }
+
+}
\ No newline at end of file
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id 'com.android.application'\r\n    id 'org.jetbrains.kotlin.android'\r\n    id 'kotlin-android-extensions'\r\n    id 'kotlin-kapt'\r\n}\r\n\r\nandroid {\r\n    compileSdk 32\r\n\r\n    defaultConfig {\r\n        applicationId \"hummfinderapp.alpha\"\r\n        minSdk 21\r\n        targetSdk 32\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n\r\n    kotlinOptions {\r\n        jvmTarget = '1.8'\r\n    }\r\n\r\n    buildFeatures {\r\n        dataBinding = true\r\n    }\r\n}\r\n\r\ndependencies {\r\n\r\n    implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\r\n    implementation 'androidx.core:core-ktx:1.8.0'\r\n    implementation 'androidx.appcompat:appcompat:1.5.0'\r\n    implementation \"androidx.fragment:fragment-ktx:1.5.2\"\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'\r\n\r\n    // Material Design\r\n    implementation 'com.google.android.material:material:1.6.1'\r\n\r\n    // Navigation Component\r\n    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.1'\r\n    implementation 'androidx.navigation:navigation-ui-ktx:2.5.1'\r\n\r\n    //Testing\r\n    testImplementation 'junit:junit:4.13.2'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.3'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'\r\n\r\n    // Kotlin components\r\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.7.0\"\r\n    api \"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.1\"\r\n    api \"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1\"\r\n\r\n    //JTransform\r\n    implementation 'com.github.wendykierp:JTransforms:3.1'\r\n\r\n    // Lifecycle components\r\n    implementation \"androidx.lifecycle:lifecycle-extensions:2.2.0\"\r\n    implementation \"androidx.lifecycle:lifecycle-common-java8:2.5.1\"\r\n    implementation \"androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1\"\r\n    implementation \"androidx.lifecycle:lifecycle-livedata-ktx:2.6.0-alpha01\"\r\n    implementation \"androidx.lifecycle:lifecycle-viewmodel-savedstate:2.6.0-alpha01\"\r\n    implementation \"androidx.lifecycle:lifecycle-runtime-ktx:2.6.0-alpha01\"\r\n\r\n    //DataBinding\r\n    kapt \"com.android.databinding:compiler:3.2.0-alpha10\"\r\n\r\n    //DataStore\r\n    implementation \"androidx.datastore:datastore-preferences:1.0.0-alpha04\"\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	(revision ce624f96a70ef7f14c961f9e359533ab408a5343)
+++ b/app/build.gradle	(date 1681928227328)
@@ -35,6 +35,7 @@
 
     buildFeatures {
         dataBinding = true
+        viewBinding true
     }
 }
 
